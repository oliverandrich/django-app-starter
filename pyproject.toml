[project]
name = "{{ app_name }}"
description = ""
authors = [{ name = "Oliver Andrich", email = "oliver@andrich.me" }]
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["django"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries",
    "Topic :: Utilities",
    "Environment :: Web Environment",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Framework :: Django :: 5.1",
    "Framework :: Django :: 5.2",
]
dynamic = ["version"]
requires-python = ">=3.9"
dependencies = ["django>=4.2"]

[project.urls]
Home = "https://{{ app_name }}.rtfd.io/"
Documentation = "https://{{ app_name }}.rtfd.io/"
Repository = "https://github.com/oliverandrich/{{ app_name }}"
"Issue Tracker" = "https://github.com/oliverandrich/{{ app_name }}/issues"

[dependency-groups]
dev = [
    "coverage[toml]",
    "django-test-plus",
    "django-stubs[compatible-mypy]>=5.1.1",
    "django-rich",
]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

# mypy
[tool.mypy]
python_version = "3.10"
plugins = ["mypy_django_plugin.main"]

[tool.django-stubs]
django_settings_module = "tests.settings"
strict_settings = false

# Ruff
[tool.ruff]
target-version = "py310"
line-length = 120

[tool.ruff.format]
exclude = ["**/migrations/*"]

[tool.ruff.lint]
select = [
    "A",   # flake8-builtins
    "ARG", # flake8-unused-arguments
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "DJ",  # flake8-django
    "E",   # pycodestyle
    "F",   # pyflakes
    "FBT", # flake8-boolean-trap
    "N",   # pep8-naming
    "Q",   # flake8-quotes
    "TID", # flake8-tidy-imports
    "W",   # pycodestyle
    "YTT", # flake8-2020
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore complexity
    "C901",
]
unfixable = [
    # Don't touch unused imports
    "F401",
    # Don't touch unused variables
    "F841",
]

[tool.ruff.lint.isort]
known-first-party = ["{{ app_name }}"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252", "ARG001", "FBT001"]
"tests/snapshots/*" = ["ALL"]
"**/migrations/*" = ["ALL"]

# Coverage
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "pass",
    "if __name__ == .__main__.:",
]
omit = ["*/migrations/*", "*/tests/*", "*/conftest.py"]
